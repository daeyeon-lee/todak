// src/component/pages/Vet/Record/VetRecordListFilter.tsx
import React, { useEffect, useMemo, useState } from 'react';
import '@/styles/main.css';
import SelectionDropdown from '@/component/selection/SelectionDropdown';
import TreatmentSlideCard from '@/component/card/TreatmentSlideCard';
import type { VetTreatment } from '@/types/Vet/vettreatmentType';
import { toTimeRange } from '@/utils/timeMapping';
import { getVetTreatments } from '@/services/api/Vet/vettreatment';
import { speciesMapping } from '@/utils/speciesMapping';
import { subjectMapping } from '@/utils/subjectMapping';

const signedOptions = [
  { value: 'ALL', label: 'Ï†ÑÏ≤¥ ÏÉÅÌÉú' },
  { value: 'false', label: 'Í≤ÄÌÜ† ÎåÄÍ∏∞' },
  { value: 'true', label: 'ÏÑúÎ™Ö ÏôÑÎ£å' },
] as const;

// YYYY-MM-DD ‚Üí "YYYYÎÖÑ MÏõî DÏùº"
const formatKoreanDate = (ymd: string) => {
  if (!ymd) return 'ÎÇ†Ïßú ÎØ∏Ï†ï';
  const [y, m, d] = ymd.split('-').map((v) => parseInt(v, 10));
  if (!y || !m || !d) return ymd;
  return `${y}ÎÖÑ ${m}Ïõî ${d}Ïùº`;
};

const pad2 = (n: number) => String(n).padStart(2, '0');
const hasTZ = (s: string) => /[zZ]|[+\-]\d{2}:?\d{2}$/.test(s);
const normalizeISOish = (s: string) => {
  let out = s.trim().replace(' ', 'T');
  // ÏÜåÏàòÏ†ê 3ÏûêÎ¶¨ÍπåÏßÄÎßå(ÏùºÎ∂Ä DBÍ∞Ä 6ÏûêÎ¶¨ÍπåÏßÄ Ï§å)
  out = out.replace(/(\.\d{3})\d+$/, '$1');
  return out;
};
const parseServerDate = (s?: string | null): Date | null => {
  if (!s || typeof s !== 'string') return null;
  const isoish = normalizeISOish(s);
  // TZÍ∞Ä ÏóÜÏúºÎ©¥ UTCÎ°ú Í∞ÑÏ£º(Z Î∂ÄÏó¨) ‚Üí ÏùºÍ¥ÄÎêú ÌååÏã±
  const withTZ = hasTZ(isoish) ? isoish : `${isoish}Z`;
  const d = new Date(withTZ);
  return isNaN(d.getTime()) ? null : d;
};
const ymdLocalFromServer = (s?: string | null) => {
  const d = parseServerDate(s);
  if (!d) return '';
  return `${d.getFullYear()}-${pad2(d.getMonth() + 1)}-${pad2(d.getDate())}`;
};

// startTimeÏóêÏÑú ÎÇ†ÏßúÌÇ§ Ï∂îÏ∂ú
const getDateKey = (t: any): string => {
  const ymd = ymdLocalFromServer(t.startTime ?? t.start_time);
  if (ymd) return ymd;

  // startTimeÏù¥ ÏóÜÏúºÎ©¥ ÏòàÏïΩÏùº Î¨∏ÏûêÏó¥(Ïù¥ÎØ∏ YYYY-MM-DDÏùº Í∞ÄÎä•ÏÑ± ÎÜíÏùå) ÏÇ¨Ïö©
  const day = t.reservationDay ?? t.reservation_day ?? '';
  if (typeof day === 'string' && day) return day.slice(0, 10);

  return 'ÎÇ†Ïßú ÎØ∏Ï†ï';
};

// "Ï¢ÖÎ•ò | ÎÇòÏù¥ÏÑ∏ | Í≥ºÎ™©" (utils Îß§Ìïë ÏÇ¨Ïö©)
const makeInfo = (t: any) => {
  const p = t.pet ?? t.petInfo ?? {};
  const speciesKo = speciesMapping[p.species as keyof typeof speciesMapping] ?? p.species ?? 'Î∞òÎ†§ÎèôÎ¨º';
  const agePart = p.age != null ? `${p.age}ÏÑ∏` : '';
  const subjectKo = subjectMapping[t.subject as keyof typeof subjectMapping] ?? 'ÏßÑÎ£å';
  return [speciesKo, agePart, subjectKo].filter(Boolean).join(' | ');
};

// ‚úÖ Ïã§Ï†ú ÏãúÏûëÏãúÍ∞Ñ ÏûàÎäîÏßÄ(Î¶¨Ïä§Ìä∏Ïùò startTime Î¨∏ÏûêÏó¥ Í∏∞Ï§Ä) Ï≤¥ÌÅ¨
const hasRealStartTime = (it: any): boolean => {
  const s = it?.startTime ?? it?.start_time;
  if (typeof s !== 'string' || !s.trim()) return false;
  const norm = s.replace(' ', 'T').replace(/\.\d+$/, '');
  const d = new Date(norm);
  return !isNaN(d.getTime());
};

// ‚úÖ Ïã§Ï†ú Ï¢ÖÎ£åÏãúÍ∞Ñ ÏûàÎäîÏßÄ(Î¶¨Ïä§Ìä∏Ïùò endTime Î¨∏ÏûêÏó¥ Í∏∞Ï§Ä) Ï≤¥ÌÅ¨
const hasRealEndTime = (it: any): boolean => {
  const s = it?.endTime ?? it?.end_time;
  if (typeof s !== 'string' || !s.trim()) return false;
  const norm = s.replace(' ', 'T').replace(/\.\d+$/, ''); // ÏÜåÏàòÏ¥à Ï†úÍ±∞
  const d = new Date(norm);
  return !isNaN(d.getTime());
};

interface Props {
  data?: VetTreatment[];           // ÎπÑÏñ¥ÏûàÏúºÎ©¥ ÎÇ¥Î∂ÄÏóêÏÑú type=2 Ìò∏Ï∂ú
  onCardClick: (id: number) => void;
}


export default function VetRecordListFilter({ data = [], onCardClick }: Props) {
  const [selectedSigned, setSelectedSigned] =
    useState<'ALL' | 'true' | 'false'>('ALL');

  // ÏõêÎ≥∏/Î≥¥Í∞ïÎ≥∏
  const [base, setBase] = useState<any[]>([]);
  const [enriched, setEnriched] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
  // ‚ñ∂ Îç∞Ïù¥ÌÑ∞ Î°úÎìú: props.dataÍ∞Ä ÎπÑÏñ¥ ÏûàÏúºÎ©¥ type=2(Ï†ÑÏ≤¥ ÏßÑÎ£å) Î°úÎìú
  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);

        // ‚úÖ ÏÉÅÏÑ∏ Ìò∏Ï∂ú ÏóÜÏù¥, Î¶¨Ïä§Ìä∏(type=2)Ïùò ÌïÑÎìú Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
        const initialList =
          (data && data.length > 0) ? (data as any[]) : ((await getVetTreatments(2)) as any[]);

        if (!alive) return;
        setBase(initialList);
        setEnriched(initialList); // ‚Üê Î∞îÎ°ú ÏÇ¨Ïö© (startTime/endTime Ìè¨Ìï®)
      } catch (e) {
        console.warn('[VetRecordListFilter] load failed:', e);
        if (alive) {
          setBase(data as any[]);
          setEnriched(data as any[]);
        }
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => { alive = false; };
  }, [data]);

  // 1) ÏÑúÎ™ÖÏÉÅÌÉú ÌïÑÌÑ∞ ‚Üí 2) ‚úÖ ÏãúÏûëÏãúÍ∞Ñ ÏóÜÎäî Ìï≠Î™© Ï†úÍ±∞ ‚Üí 3) ÏµúÏã† ÏãúÏûëÏãúÍ∞Ñ(desc)
  const filteredData = useMemo(() => {
    let list = [...enriched];

    if (selectedSigned !== 'ALL') {
      const want = selectedSigned === 'true';
      list = list.filter(
        (it: any) => !!(it.isCompleted ?? it.is_completed) === want
      );
    }

    // ÏãúÏûë / Ï¢ÖÎ£å ÏãúÍ∞Ñ ÏóÜÎäî Ìï≠Î™© Ï†úÏô∏ (Î¶¨Ïä§Ìä∏Ïùò startTime Í∏∞Ï§Ä)
    list = list.filter(hasRealStartTime);
    list = list.filter(hasRealEndTime); 

    list.sort((a: any, b: any) => {
      const sa = a.startTime ?? a.start_time ?? '';
      const sb = b.startTime ?? b.start_time ?? '';
      return sa < sb ? 1 : -1;
    });

    return list as VetTreatment[];
  }, [enriched, selectedSigned]);

  // ÎÇ†ÏßúÎ≥Ñ Í∑∏Î£πÌïë + Í∞Å ÎÇ†Ïßú ÎÇ¥Î∂ÄÎäî ÏãúÍ∞Ñ ÎÇ¥Î¶ºÏ∞®Ïàú(ÏµúÍ∑º Î®ºÏ†Ä)
  const grouped = useMemo(() => {
    const map = new Map<string, VetTreatment[]>();
    for (const it of filteredData as any[]) {
      const key = getDateKey(it) || 'ÎÇ†Ïßú ÎØ∏Ï†ï';
      const arr = map.get(key) ?? [];
      arr.push(it as any);
      map.set(key, arr);
    }

    const entries = Array.from(map.entries()).sort((a, b) => b[0].localeCompare(a[0]));
    for (const [, arr] of entries as any) {
      const getTs = (x: any) => {
        const s = x.startTime ?? x.start_time ?? '';
        if (typeof s === 'string' && s) {
          const norm = s.replace(' ', 'T').replace(/\.\d+$/, '');
          const d = new Date(norm);
          if (!isNaN(d.getTime())) return d.getTime();
        }
        const slot = x.reservationTime ?? x.reservation_time;
        if (Number.isFinite(slot)) return Number(slot) * 30 * 60 * 1000;
        return 0;
      };
      arr.sort((a: any, b: any) => getTs(b) - getTs(a));
    }
    return entries as [string, VetTreatment[]][];
  }, [filteredData]);

  return (
    <>
      <div className="px-7 flex gap-3">
        <div className="flex-1">
          <SelectionDropdown
  options={signedOptions as any}
  value={selectedSigned}
  onChange={(v) => setSelectedSigned(v as any)}
  placeholder={loading ? 'Î∂àÎü¨Ïò§Îäî Ï§ë‚Ä¶' : 'ÏÑúÎ™ÖÏÉÅÌÉú ÏÑ†ÌÉù'}
  dropdownId="signed"                       // üîπ Í≥†Ïú† id
  activeDropdown={activeDropdown}           // üîπ Ï†ÑÏó≠ ÌôúÏÑ± id
  setActiveDropdown={setActiveDropdown}     // üîπ setter
/>
        </div>
      </div>

      <div className="px-7">
        {grouped.map(([dateKey, items]) => (
          <div key={dateKey} className="mb-5 mt-1">
            <div className="flex justify-between items-center mb-3">
              <h4 className="h4 text-black">{formatKoreanDate(dateKey)}</h4>
              <h4 className="h4 text-black">{items.length}Í±¥</h4>
            </div>

            <div className="flex flex-col gap-3">
              {items.map((t: any) => {
                const start = t.startTime ?? t.start_time;
                const end   = t.endTime   ?? t.end_time;
                const slot  = t.reservationTime ?? t.reservation_time;
                const timeRange = toTimeRange(start, end, slot);

                const petName = t.pet?.name ?? t.petInfo?.name ?? 'Î∞òÎ†§ÎèôÎ¨º';
                const subjectKo = subjectMapping[t.subject as keyof typeof subjectMapping] ?? 'ÏßÑÎ£å';
                const info    = makeInfo(t);

                return (
                  <TreatmentSlideCard
                    key={t.treatmentId}
                    time={timeRange}
                    department={subjectKo}
                    petName={petName}
                    petInfo={info}
                    isAuthorized={true}
                    is_signed={!!(t.isCompleted ?? t.is_completed)}
                    onClick={() => onCardClick(t.treatmentId)}
                  />
                );
              })}
            </div>
          </div>
        ))}
      </div>
    </>
  );
}
