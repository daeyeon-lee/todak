pipeline {
  agent any

  environment {
    DOCKER_IMAGE = 'dlsqja3436/todak-backend'
    TAG = 'goguma'
    EC2_HOST = 'i13a409.p.ssafy.io'
    CONTAINER_NAME = 'my-server'
    COMPOSE_DIR = './backend' 
  }

  stages {
    stage('Build Application') {
      agent {
        docker {
          image 'gradle:7.6-jdk17'
        }
      }
      steps {
        sh '''
          cd ./backend/
          chmod +x ./gradlew
          ./gradlew clean build
        '''
        archiveArtifacts artifacts: 'backend/build/libs/*.jar', fingerprint: true
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        withCredentials([
          usernamePassword(
            credentialsId: 'dockerhub-creds',
            usernameVariable: 'DOCKERHUB_USERNAME',
            passwordVariable: 'DOCKERHUB_PASSWORD'
          )
        ]) {
          sh '''
            cd ./backend/
            echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            docker build -t ${DOCKER_IMAGE}:${TAG} .
            docker push ${DOCKER_IMAGE}:${TAG}
          '''
        }
      }
    }

    stage('Deploy with Docker Compose to EC2') {
      steps {
        withCredentials([
          sshUserPrivateKey(
            credentialsId: 'ec2-ssh-key',
            keyFileVariable: 'KEYFILE',
            usernameVariable: 'EC2_USERNAME'
          ),
          usernamePassword(
            credentialsId: 'dockerhub-creds',
            usernameVariable: 'DOCKERHUB_USERNAME',
            passwordVariable: 'DOCKERHUB_PASSWORD'
          )
        ]) {
          sh '''
            chmod 600 "$KEYFILE"

            # EC2에 docker-compose 파일 및 .env 전달
            scp -i "$KEYFILE" -o StrictHostKeyChecking=no ${COMPOSE_DIR}/docker-compose.yml $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/
            echo "DOCKER_IMAGE=${DOCKER_IMAGE}" > ${COMPOSE_DIR}/.env
            echo "TAG=${TAG}" >> ${COMPOSE_DIR}/.env
            scp -i "$KEYFILE" -o StrictHostKeyChecking=no ${COMPOSE_DIR}/.env $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/

            # EC2에서 실행
            ssh -i "$KEYFILE" -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST '
              cd /home/$USER
              echo '$DOCKERHUB_PASSWORD' | docker login -u '$DOCKERHUB_USERNAME' --password-stdin
              docker compose down || true
              docker compose pull
              docker compose up -d --remove-orphans
            '
          '''
        }
      }
    }
  }
}
